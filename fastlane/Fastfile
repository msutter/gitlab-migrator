require 'pry'
# fix 'SSL_connect returned=1 errno=0 state=error: certificate verify failed' error
require 'openssl'
OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE
# cert_path = Gem.loaded_specs['google-api-client'].full_gem_path+'/lib/cacerts.pem'
# ENV['SSL_CERT_FILE'] = cert_path

# Customise that file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update that, if you use features of a newer version
fastlane_version "1.40.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV["GITLAB_API_HTTPARTY_Project with namespaceOPTIONS"]="{verify: false}"

    # load projects/namespace mapping
    current_path = File.expand_path(__FILE__)
    maps_path = "#{File.dirname(File.dirname(current_path))}/maps"

    map_files = Dir["#{maps_path}/*"]
    if map_files.empty?
      UI.message("No mapping file found")
    else
      map = {}
      map_files.each do |map_file|
        UI.message("Using map file #{map_file}")
        content = ""
        # read file and exclude commants and empty lines
        File.read(map_file).each_line do |line|
          line.chomp!
          next if line.empty?
          next if line.include? "#"
          content = content + line + "\n"
        end
        map.merge!(Hash[*content.split(/[; \n]+/)])
      end
      UI.message("Path Map: #{JSON.pretty_generate(map).gsub(":", " =>")}")
      ENV["GITLAB_PATH_MAP"] = JSON.dump map
    end
  end

  desc "Lists all projects of the source"
  lane :list_projects do |params|
    projects_src = gitlab_get_projects(namespace: params[:namespace] ,endpoint: ENV["FL_GITLAB_ENDPOINT_SRC"], api_token: ENV["FL_GITLAB_TOKEN_SRC"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
    projects_dst = gitlab_get_projects(namespace: params[:namespace] ,endpoint: ENV["FL_GITLAB_ENDPOINT_DST"], api_token: ENV["FL_GITLAB_TOKEN_DST"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }

    UI.message "#{projects_src.count} projects Projecst read from the source"
    UI.message "#{projects_dst.count} projects Projecst read from the destination"

    project_paths_dst = projects_dst.map { |p| p.path.downcase }
    project_paths_src = projects_src.map { |p| p.path.downcase }

    projects_not_migrated = projects_src.select { |p| !project_paths_dst.include? p.path.downcase }
    projects_already_migrated = projects_src.select { |p| project_paths_dst.include? p.path.downcase }
    projects_not_in_src = projects_dst.select { |p| !project_paths_src.include? p.path.downcase }

    if projects_not_migrated.empty?
      puts "All projects have already been migrated"
    else
      puts "These project are not yet migrated:"
      projects_not_migrated.each do |p|
        puts "\t‚ö†Ô∏è  #{p.path_with_namespace}"
      end
    end

    if projects_already_migrated.empty?
      puts "No projecst migrated yet"
    else
      puts "These project have already been migrated:"
      projects_already_migrated.each do |p|
        puts "\t‚úÖ  #{p.path_with_namespace}"
      end
    end

    if not projects_not_in_src.empty?
      puts "There are new projects that exist not in the original gitlab instance"
      projects_not_in_src.each do |p|
        puts "\tüè≥  #{p.path_with_namespace}"
      end
    end
  end

  desc "Migrate a specific project"
  desc "Specify the project(s) that should be migrated by its path (with namespace) or by namespace"
  desc "Example: fastlane migrate project:cocoapods/specs"
  lane :migrate do |params|
    unless ENV['FL_GITLAB_GET_RPROJECT'] || ENV['FL_GITLAB_GET_RNAMESPACE'] || params[:project] || params[:namespace]
       raise "Please give the project name or the namespace name (group name)"
    end

    if project_src = params[:project] || ENV['FL_GITLAB_GET_RPROJECT']
      # source
      UI.message("Checking the source for existing projects with path #{project_src}")
      projects_src = gitlab_get_projects(project: project_src, endpoint: ENV["FL_GITLAB_ENDPOINT_SRC"], api_token: ENV["FL_GITLAB_TOKEN_SRC"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
      raise "Project with path #{project} not found in source #{ENV["FL_GITLAB_ENDPOINT_SRC"]}" unless projects_src.count == 1

      path_map = JSON.load ENV["GITLAB_PATH_MAP"]
      project_array = project_src.split('/')
      project_src_namespace = project_array.first
      project_src_name = project_array.last
      project_dst = "#{path_map[project_src_namespace] || project_src_namespace}/#{project_src_name}"

      # destination
      UI.message("Checking the destination for existing projects with path #{project_dst}")
      projects_dst = gitlab_get_projects(project: project_dst, endpoint: ENV["FL_GITLAB_ENDPOINT_DST"], api_token: ENV["FL_GITLAB_TOKEN_DST"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
    end

    if namespace_src = params[:namespace] || ENV['FL_GITLAB_GET_RNAMESPACE']
      # source
      UI.message("Checking the source for existing projects with namespace #{namespace_src}")
      projects_src = gitlab_get_projects(namespace: namespace_src, endpoint: ENV["FL_GITLAB_ENDPOINT_SRC"], api_token: ENV["FL_GITLAB_TOKEN_SRC"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
      raise "No projects with namespace #{namespace_src} found in source #{ENV["FL_GITLAB_ENDPOINT_SRC"]}" unless projects_src.count > 0

      path_map = JSON.load ENV["GITLAB_PATH_MAP"]
      if path_map.key?(namespace_src)
        namespace_dst = path_map[namespace_src]
      else
        namespace_dst = namespace_src
      end
      # destination
      UI.message("Checking the destination for existing projects with namespace #{namespace_dst}")
      projects_dst = gitlab_get_projects(namespace: namespace_dst, endpoint: ENV["FL_GITLAB_ENDPOINT_DST"], api_token: ENV["FL_GITLAB_TOKEN_DST"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
    end

    projects_src.each do |project|
      project_path = project.path_with_namespace
      project_dst = projects_dst.select {|p| p.path == project.path}
      if project_dst.empty?
        UI.message("Checks OK, Starting to migrate project #{project_path} to #{ENV['FL_GITLAB_ENDPOINT_DST']}")
        new_project = gitlab_create_project(
          project: project,
        )
        UI.message("Gitlab project has been migrated, now migrate the repository")

        if ENV["FL_GIT_PROTOCOL_SRC"] && (ENV["FL_GIT_PROTOCOL_SRC"].downcase == 'https')
          git_protocol_src = project.http_url_to_repo
        else
          git_protocol_src = project.ssh_url_to_repo
        end

        if ENV["FL_GIT_PROTOCOL_DST"] && (ENV["FL_GIT_PROTOCOL_DST"].downcase == 'https')
          git_protocol_dst = new_project.http_url_to_repo
        else
          git_protocol_dst = new_project.ssh_url_to_repo
        end

        migrate_git_repository(from_repo_url: git_protocol_src, to_repo_url: git_protocol_dst)

        if project.wiki_enabled
          UI.message("Migrating wiki-repository")
          migrate_git_repository(from_repo_url: git_protocol_src.gsub('.git', '.wiki.git'), to_repo_url: git_protocol_dst.gsub('.git', '.wiki.git'))
        end

      elsif project_dst.count == 1
        new_project = projects_dst.first
        UI.message("Project #{new_project.path_with_namespace} exists already")
        new_project = modify_migrated_repo(
          repo_url: new_project.http_url_to_repo,
          custom_script: params[:custom_script]
        )

      else
        Helper.log.error("Several potential target projects exist: #{project_dst}")
        raise "Several potential target projects exist, dont know which one to pick"
      end

      # UI.message("Gitlab project has been migrated, now migrate the repository")

      # if ENV["FL_GIT_PROTOCOL_SRC"] && (ENV["FL_GIT_PROTOCOL_SRC"].downcase == 'https')
      #   git_protocol_src = project.http_url_to_repo
      # else
      #   git_protocol_src = project.ssh_url_to_repo
      # end

      # if ENV["FL_GIT_PROTOCOL_DST"] && (ENV["FL_GIT_PROTOCOL_DST"].downcase == 'https')
      #   git_protocol_dst = new_project.http_url_to_repo
      # else
      #   git_protocol_dst = new_project.ssh_url_to_repo
      # end

      # migrate_git_repository(custom_script: params[:custom_script],from_repo_url: git_protocol_src, to_repo_url: git_protocol_dst)

      # if project.wiki_enabled
      #   UI.message("Migrating wiki-repository")
      #   migrate_git_repository(custom_script: params[:custom_script], from_repo_url: git_protocol_src.gsub('.git', '.wiki.git'), to_repo_url: git_protocol_dst.gsub('.git', '.wiki.git'))
      # end
    end
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
